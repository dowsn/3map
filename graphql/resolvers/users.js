import { UserInputError } from 'apollo-server';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import User from '../../models/User.js';
import {
  validateLoginInput,
  validateRegisterInput,
} from '../../utils/validations.js';

// TODO: refactor to have list of functions in query and mutation

const resolvers = {
  Query: {
    async getUsers() {
      try {
        const users = await User.find();
        return users;
      } catch (error) {
        throw new Error(error);
      }
    }
  },
  Mutation: {

    async login(_, { username, password }) {

      const { errors, valid } = validateLoginInput(username, password);

      if (!valid) {
        throw new UserInputError('Errors', errors);
      }

      const user = await User.findOne({ username });

      if (!user) {
        errors.general = 'User not found';
        throw new UserInputError('User not found', { errors });
      }

      let pwValidation = await bcrypt.compare(password, user.password);

      if (pwValidation) {

        const token = generateToken(user);

        return {
          ...user._doc,
          id: user._id,
          token,
        };


      } else {
        errors.general = 'Wrong credentials';
        throw new UserInputError('Wrong credentials', { errors });
      }

    },


    // parent, args, context, info
    async register(_, { registerInput: { username, email, password, confirmPassword } }) {
      // validate user data
      const { valid, errors } = validateRegisterInput(username, email, password, confirmPassword);

      if (!valid) {
        throw new UserInputError('Errors', { errors });
      }

      // make sure user doesnt already exist
      const user = await User.findOne({ username });

      if (user) {
        throw new UserInputError('Username is taken', {
          errors: {
            username: 'This username is taken',
          },
        });
      }

      // hash password and create an auth token
      password = await bcrypt.hash(password, 12);
      const newUser = new User({
        email,
        username,
        password,
        createdAt: new Date().toISOString(),
      });
      const res = await newUser.save();

      const token = generateToken(res);

      return {
        ...res._doc,
        id: res._id,
        token,
      };
    }
  }
};


// This function generates a token for a user.
// The token is generated by signing a token with the JWT module using the user's id, username and email.
// The token is then returned and will be used to authenticate the user.

// Generate a token based on the user's username, id, and email
function generateToken(user) {
  // If the user is null, return null
  if (!user) {
    console.log("User is null!");
    return null;
  }



  // Otherwise, return a token based on the user's information
  const token = jwt.sign(
    {
      username: user.username,
      id: user.id,
      email: user.email,
    },
    process.env.SECRET_KEY,
    { expiresIn: '1h' },
  );
  console.log('token: ', token);
  return token;
}



export default resolvers;